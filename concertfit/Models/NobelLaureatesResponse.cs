// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using NobelLaureatesResponse;
//
//    var topLevel = TopLevel.FromJson(jsonString);

namespace NobelLaureatesResponse
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class TopLevel
    {
        [JsonProperty("laureates")]
        public Laureate[] Laureates { get; set; }
    }

    public partial class Laureate
    {
        [JsonProperty("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("firstname")]
        public string Firstname { get; set; }

        [JsonProperty("surname")]
        public string Surname { get; set; }

        [JsonProperty("born")]
        public string Born { get; set; }

        [JsonProperty("died")]
        public Died Died { get; set; }

        [JsonProperty("bornCountry")]
        public Country BornCountry { get; set; }

        [JsonProperty("bornCountryCode")]
        public CountryCode BornCountryCode { get; set; }

        [JsonProperty("bornCity")]
        public string BornCity { get; set; }

        [JsonProperty("diedCountry", NullValueHandling = NullValueHandling.Ignore)]
        public Country? DiedCountry { get; set; }

        [JsonProperty("diedCountryCode", NullValueHandling = NullValueHandling.Ignore)]
        public CountryCode? DiedCountryCode { get; set; }

        [JsonProperty("diedCity", NullValueHandling = NullValueHandling.Ignore)]
        public string DiedCity { get; set; }

        [JsonProperty("gender")]
        public long Gender { get; set; }

        [JsonProperty("prizes")]
        public Prize[] Prizes { get; set; }
    }

    public partial class Died
    {
        [JsonProperty("dateTime")]
        public DateTimeOffset? DateTime { get; set; }

        [JsonProperty("enum")]
        public long? Enum { get; set; }
    }

    public partial class Prize
    {
        [JsonProperty("year")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Year { get; set; }

        [JsonProperty("category")]
        public long Category { get; set; }

        [JsonProperty("share")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Share { get; set; }

        [JsonProperty("motivation")]
        public string Motivation { get; set; }

        [JsonProperty("affiliations")]
        public Affiliation[] Affiliations { get; set; }

        [JsonProperty("overallMotivation", NullValueHandling = NullValueHandling.Ignore)]
        public string OverallMotivation { get; set; }
    }

    public partial class Affiliation
    {
        [JsonProperty("affiliationClass")]
        public AffiliationClass AffiliationClass { get; set; }

        [JsonProperty("anythingArray")]
        public object[] AnythingArray { get; set; }
    }

    public partial class AffiliationClass
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("city", NullValueHandling = NullValueHandling.Ignore)]
        public string City { get; set; }

        [JsonProperty("country", NullValueHandling = NullValueHandling.Ignore)]
        public CountryEnum? Country { get; set; }
    }

    public enum Country { Italy, Jamaica, Norway, Philippines, Spain, UnitedKingdom, Usa };

    public enum CountryCode { Es, Gb, It, Jm, No, Ph, Us };

    public enum CountryEnum { Australia, Denmark, UnitedKingdom, Usa };

    public partial class TopLevel
    {
        public static TopLevel FromJson(string json) => JsonConvert.DeserializeObject<TopLevel>(json, NobelLaureatesResponse.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this TopLevel self) => JsonConvert.SerializeObject(self, NobelLaureatesResponse.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                CountryConverter.Singleton,
                CountryCodeConverter.Singleton,
                CountryEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class CountryConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Country) || t == typeof(Country?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Italy":
                    return Country.Italy;
                case "Jamaica":
                    return Country.Jamaica;
                case "Norway":
                    return Country.Norway;
                case "Philippines":
                    return Country.Philippines;
                case "Spain":
                    return Country.Spain;
                case "USA":
                    return Country.Usa;
                case "United Kingdom":
                    return Country.UnitedKingdom;
            }
            throw new Exception("Cannot unmarshal type Country");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Country)untypedValue;
            switch (value)
            {
                case Country.Italy:
                    serializer.Serialize(writer, "Italy");
                    return;
                case Country.Jamaica:
                    serializer.Serialize(writer, "Jamaica");
                    return;
                case Country.Norway:
                    serializer.Serialize(writer, "Norway");
                    return;
                case Country.Philippines:
                    serializer.Serialize(writer, "Philippines");
                    return;
                case Country.Spain:
                    serializer.Serialize(writer, "Spain");
                    return;
                case Country.Usa:
                    serializer.Serialize(writer, "USA");
                    return;
                case Country.UnitedKingdom:
                    serializer.Serialize(writer, "United Kingdom");
                    return;
            }
            throw new Exception("Cannot marshal type Country");
        }

        public static readonly CountryConverter Singleton = new CountryConverter();
    }

    internal class CountryCodeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(CountryCode) || t == typeof(CountryCode?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ES":
                    return CountryCode.Es;
                case "GB":
                    return CountryCode.Gb;
                case "IT":
                    return CountryCode.It;
                case "JM":
                    return CountryCode.Jm;
                case "NO":
                    return CountryCode.No;
                case "PH":
                    return CountryCode.Ph;
                case "US":
                    return CountryCode.Us;
            }
            throw new Exception("Cannot unmarshal type CountryCode");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (CountryCode)untypedValue;
            switch (value)
            {
                case CountryCode.Es:
                    serializer.Serialize(writer, "ES");
                    return;
                case CountryCode.Gb:
                    serializer.Serialize(writer, "GB");
                    return;
                case CountryCode.It:
                    serializer.Serialize(writer, "IT");
                    return;
                case CountryCode.Jm:
                    serializer.Serialize(writer, "JM");
                    return;
                case CountryCode.No:
                    serializer.Serialize(writer, "NO");
                    return;
                case CountryCode.Ph:
                    serializer.Serialize(writer, "PH");
                    return;
                case CountryCode.Us:
                    serializer.Serialize(writer, "US");
                    return;
            }
            throw new Exception("Cannot marshal type CountryCode");
        }

        public static readonly CountryCodeConverter Singleton = new CountryCodeConverter();
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class CountryEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(CountryEnum) || t == typeof(CountryEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Australia":
                    return CountryEnum.Australia;
                case "Denmark":
                    return CountryEnum.Denmark;
                case "USA":
                    return CountryEnum.Usa;
                case "United Kingdom":
                    return CountryEnum.UnitedKingdom;
            }
            throw new Exception("Cannot unmarshal type CountryEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (CountryEnum)untypedValue;
            switch (value)
            {
                case CountryEnum.Australia:
                    serializer.Serialize(writer, "Australia");
                    return;
                case CountryEnum.Denmark:
                    serializer.Serialize(writer, "Denmark");
                    return;
                case CountryEnum.Usa:
                    serializer.Serialize(writer, "USA");
                    return;
                case CountryEnum.UnitedKingdom:
                    serializer.Serialize(writer, "United Kingdom");
                    return;
            }
            throw new Exception("Cannot marshal type CountryEnum");
        }

        public static readonly CountryEnumConverter Singleton = new CountryEnumConverter();
    }
}
